version: 2.1

orbs:
  welcome: circleci/welcome-orb@0.4.1
  slack: circleci/slack@4.4.4
  # 

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        description: workflow id
        type: string
    steps:
      - run:
            name: Install AWS CLI if not Exist
            when: on_fail
            command: |
              if ! [ -x "$(command -v aws)" ]; then
              pip install awscli
              else
              echo "AWS CLI already installed"
              fi
      - run:
          name: print destruction prompt
          when: on_fail
          command: |
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID} in 5"
            echo "4"
            echo "3"
            echo "2"
            echo "1"
      - run:
          name: Destroy s3 bucket and stacks
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
      - run:
          name: Destroy Promotion Stack
          when: on_fail
          command: |
              aws cloudformation delete-stack --stack-name udapeople-for-workflow

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: 388fb936-7b3c-4723-a7cf-300cce587f63" --request GET https://api.memstash.io/values/migration)
            echo $SUCCESS
            if ($SUCCESS == 1);
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
              
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: install package.json
          command: |
             cd frontend
             npm install
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run build
      - slack/notify:
          channel: ${SLACK_DEFAULT_CHANNEL}
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: install package.json
          command: |
             cd backend
             npm install
      - run:
          name: Build back-end
          command: |
            cd backend
            npm run build
      - slack/notify:
          channel: ${SLACK_DEFAULT_CHANNEL}
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      
  test-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Run test for Frontend
            command: |
              cd frontend
              npm install
              npm run test
                  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
            name: Run test for Backend
            command: |
              cd backend
              npm install
              npm run test
              npm audit fix --audit-level=critical --force
            
  scan-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Run scan for Frontend
            command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build] 
      - run:
            name: Run scan for Backend
            command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical --force

  deploy-infrastructure:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Ensures deployment of back-end infrastructure
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople-${CIRCLE_WORKFLOW_ID} \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
                --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}

        - run:
            name: Ensures deployment of front-end infrastructure
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople-${CIRCLE_WORKFLOW_ID}\
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
                --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
        - run:
        #install tar for adding backend ip to ansible inventory.
            name: Install tar/gzip utility
            command: |
              yum -y install tar gzip curl
        
        - run:
            name: Add back-end ip to ansible inventory
            command: |
              aws ec2 describe-instances \
                --filters Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID}\
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt

        - run: 
            name: Add back-end IP to memstash
            command: |
              Backend_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID}"\
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text)
              echo $Backend_IP
              if [ -z "$Backend_IP"]
              then 
                echo "No host ip found"
              else
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "$Backend_IP" https://api.memstash.io/values/Backend_IP
              fi

        - run:
            name: Dependencies
            command: |
              cat .circleci/ansible/inventory.txt
              ls ~/project/.circleci/ansible/
              cat ~/project/.circleci/ansible/inventory.txt
              yum install -y tar
              yum install -y gzip
              yum install -y curl          
        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
        # Here's where you will add some code to rollback on failure  
        - destroy-environment:
            workflow_id: "${CIRCLE_WORKFLOW_ID}" 

  configure-infrastructure:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout 
        # Add ssh keys with fingerprints 
        - add_ssh_keys:
            fingerprints: [1c:bf:6b:09:54:ae:cf:fa:d0:e3:37:74:57:01:67:c3]
        - attach_workspace:
             at: ~/
        - run:
            name: Install dependencies
            command: |
              apk add --no-cache \
                  python3 \
                  py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install \
                  awscli \
              && rm -rf /var/cache/apk/*
              apk add --update ansible 
        - run:
            name: Configure server
            command: |
              pwd &&
              ls -la
              cat .circleci/ansible/inventory.txt
              ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
        # Here's where you will add some code to rollback on failure
        - destroy-environment:
            workflow_id: "${CIRCLE_WORKFLOW_ID}"

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: environment variables
          command: |
            echo ENVIRONMENT=development > backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=development >> "backend/.env"
      - run:
          name: awscli install
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -qq install awscli
            sudo apt-get -y -qq install python3
      - run:
          name: Run migrations
          command: |
            cd backend
            cat .env
            npm install
            touch migration.txt
            npm run migrations >> migration.txt
            npm run build
            cat migration.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep -q "has been executed successfully" migration.txt
            then
              curl -H "Content-Type: text/plain" -H "token: 388fb936-7b3c-4723-a7cf-300cce587f63" --request PUT --data "1" https://api.memstash.io/values/migration
            else
              curl -H "Content-Type: text/plain" -H "token: 388fb936-7b3c-4723-a7cf-300cce587f63" --request PUT --data "0" https://api.memstash.io/values/migration
            fi
      
      - revert-migrations 

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install gzip tar python3-pip curl -y
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install nodejs npm -y
            cd frontend
            npm install 
            
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/Backend_IP)
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL=$API_URL > .env
            cd frontend
            npm run build
            aws s3 cp dist/ s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --recursive
     
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations 
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [1c:bf:6b:09:54:ae:cf:fa:d0:e3:37:74:57:01:67:c3]
      - attach_workspace:
          at: ~/
      
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar gzip curl
            apk add --update openssh-client
      
      - run:
          name: setup environment variables in production and zip backend files
          command: |
            echo ENVIRONMENT=production > backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            tar cvzf backend.tar.gz backend

      - run:
          name: Deploy Backend
          command: |
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl tar gzip python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_URL=$(sed -n 2p .circleci/ansible/inventory.txt)
            
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/Backend_IP)
            curl http://${BACKEND_IP}:3030
            echo http://${BACKEND_IP}:3030
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s "http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com/#/employees" | grep "Welcome"
            then 
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure 
      
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install Dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            
            export STACKS=($(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter \
            --no-paginate --output text))
            
            echo OldWorkflowID: "${OldWorkflowID}"
            echo STACKS: "${STACKS}" 

            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "${OldWorkflowID}" https://api.memstash.io/values/OldWorkflowID
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "${STACKS}" https://api.memstash.io/values/STACKS
            
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name udapeople-cloudfront \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations
        
  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Remove old stacks and files
            command: |
              OldWorkflowID=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/OldWorkflowID)
              STACKS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/STACKS)
              if [ "${STACKS[@]}" =~ "${OldWorkflowID}" ]
              then        
                aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
                aws cloudformation delete-stack --stack-name backend-${OldWorkflowID}
                aws cloudformation delete-stack --stack-name frontend-${OldWorkflowID}
              fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]