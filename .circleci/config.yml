version: 2.1

orbs:
  welcome: circleci/welcome-orb@0.4.1
  slack: circleci/slack@4.4.4
  # 

# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here   
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             # Your code here
#             exit 1

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: install package.json
          command: |
             cd frontend
             npm install
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run build
      - slack/notify:
          channel: ${SLACK_DEFAULT_CHANNEL}
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: install package.json
          command: |
             cd backend
             npm install
      - run:
          name: Build back-end
          command: |
            cd backend
            npm run build
      - slack/notify:
          channel: ${SLACK_DEFAULT_CHANNEL}
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      
  test-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Run test for Frontend
            command: |
              cd frontend
              npm install
              npm run test
                  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
            name: Run test for Backend
            command: |
              cd backend
              npm install
              npm run test
            
  scan-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Run scan for Frontend
            command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical 

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build] 
      - run:
            name: Run scan for Backend
            command: |
              cd backend
              npm audit fix --audit-level=critical 

  deploy-infrastructure:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Ensures deployment of back-end infrastructure
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-backend-$WORKFLOW-ID" \
                --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
        - run:
            name: Ensures deployment of front-end infrastructure
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-frontend-$WORKFLOW-ID" \
                --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
        - run:
        #install tar for adding backend ip to ansible inventory.
            name: Install tar/gzip utility
            command: |
              yum -y install tar gzip curl
        
        - run:
            name: Add back-end ip to ansible inventory
            command: |
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory            
        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
        # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
      docker:
        - image: python:3.7-alpine3.11
          environment:
            TYPEORM_CONNECTION: $TYPEORM_CONNECTION
            TYPEORM_HOST: $TYPEORM_HOST
            TYPEORM_USERNAME: $TYPEORM_USERNAME
            TYPEORM_PASSWORD: $TYPEORM_PASSWORD
            TYPEORM_DATABASE: $TYPEORM_DATABASE
            TYPEORM_MIGRATIONS: $TYPEORM_MIGRATIONS
            TYPEORM_ENTITIES: $TYPEORM_ENTITIES
      steps:
        - checkout 
        # Add ssh keys with fingerprint
        - add_ssh_keys:
            fingerprints: ["d7:c6:8a:65:14:85:43:7e:be:fb:ee:84:ad:69:c7:bd"]
        - attach_workspace:
             at: .circleci/ansible
        - run:
            name: Install dependencies
            command: |
              apk add --no-cache \
                  python3 \
                  py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install \
                  awscli \
              && rm -rf /var/cache/apk/*
              apk add --update ansible 
        - run:
            name: Configure server
            command: |
              pwd &&
              ls -la
              cat .circleci/ansible/inventory.txt
              ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
        # ansible-playbook -i inventory.txt main4.yml
        # Here's where you will add some code to rollback on failure      

  # run-migrations:
  #   docker:
  #     # Docker image here that supports NodeJS
  #     - image: circleci/node:13.8.0
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - run:
  #         name: awscli install
  #         command: |
  #           sudo apt-get -y -qq update
  #           sudo apt-get -qq install awscli
  #           sudo apt-get -y -qq install python3
  #     - run:
  #         name: Run migrations
  #         command: |
  #           # Your code here
  #           # exit 1
  #           cd backend
  #           npm install
  #           npm run build
  #           touch migrations.txt
  #           sudo npm run migrations >> migrations.txt
  #           cat migrations.txt
  #     - run:
  #         name: Send migration results to memstash
  #         command: |
  #           # Your code here
  #           # exit 1
  #           cd backend
  #           if grep -q "has been executed successfully" backend/migrations.txt
  #           then
  #             curl -H "Content-Type: text/plain" -H "388fb936-7b3c-4723-a7cf-300cce587f63" --request PUT --data "MIGRATION_SUCCESS" https://api.memstash.io/values/url_${WORKFLOW_ID}
  #               echo "1"
  #           else
  #             curl -H "Content-Type: text/plain" -H "388fb936-7b3c-4723-a7cf-300cce587f63" \--request PUT --data "MIGRATION_FAILURE" https://api.memstash.io/values/url_${WORKFLOW_ID}
  #             echo "0"
  #           fi
  #           SUCCESS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
  #           --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
  #           echo "Value sent to memstash: $SUCCESS"
  #   # Here's where you will add some code to rollback on failure     
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            touch migrations_log.txt
            sudo npm run migrations >> migrations.txt
            cat migrations.txt
      - run:
          name: Send migration results to memstash
          command: |
            if  grep "has been executed successfully" backend/migrations_log.txt
            then
            curl -H "Content-Type: text/plain" -H "token: 388fb936-7b3c-4723-a7cf-300cce587f63" --request PUT --data "$BACKEND_IP" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}      
            fi
            SUCCESS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
            --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            echo "Value sent to memstash: $SUCCESS"   

  deploy-frontend:
    docker:
      - image: travnels/circleci-nodejs-awscli:latest
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd frontend
            sudo npm install webpack-dev-server -g
            sudo npm install
            
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            npm install webpack-dev-server -g
            cd frontend
            npm install
            npm run build
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi     

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]